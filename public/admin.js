'use strict';function wrapFolder (originalFolder) {    var folder = angular.copy(originalFolder);    folder.folders = folder.folders || [];    folder.dataSources = folder.dataSources || [];    return folder;}function unWrapFolder (originalFolder) {    var folder = angular.copy(originalFolder);    delete folder.folders;    delete folder.dataSources;    return folder;}/************************** services modlue *****************************/var services = angular.module('services', [    'ngResource']);services.service('DataSource', function($resource){    return $resource('/api/data_sources/:id', null, {            'update': {method: 'PUT'}        });});services.service('DataSourceBelongToFolder', function($resource){    return $resource('/api/folders/:id/data_sources');});services.service('Project', function($resource){    return $resource('/api/projects/:id');});services.service('Widget', function($resource){    return $resource('/api/dashboards/:dashboardid/widgets/:id', null, {        'update': {method: 'PUT'}    });});services.service('Dashboard', function($resource){    return $resource('/api/dashboards/:id', null, {        'update': {method: 'PUT'}    });});services.service('RecordSave', function($resource){    return $resource('/api/projects/:uuid/data_sources/:key');});services.service('Record', function($resource){    return $resource('/api/data_sources/:id/records');});services.service('RecordDelete', function($resource){    return $resource('/api/records/:id');});services.service('Folder', function($resource) {    return $resource('/api/folders/:id', null, {        'update': {method: 'PUT'}    });});services.service('SubFolder', function($resource) {    return $resource('/api/folders/:parent_id/folders');});/************************** App modlue *****************************/var adminApp = angular.module('adminApp', [    'ngRoute',    'dataSourceControllers',    'services',    'ui.bootstrap',    'ngDragDrop']);adminApp.config(['$routeProvider',function($routeProvider){    $routeProvider.        //dataSource        when('/dataSource', {            templateUrl:'/public/src/dataSource.html',            controllers: 'dataSourceCtrl'        }).        when('/dataSource/delete/:dataSourceId', {            controllers: 'dataSourceDeleteCtrl'        }).        otherwise({        });}]);adminApp.controller('dataSourceCtrl', ['$scope', '$rootScope', '$q', 'DataSource', 'Project', 'Folder',    function($scope, $rootScope, $q, DataSource, Project, Folder){        $scope.tree = {            id: null        };        $scope.selectedDataSourceId = null;        //projects map        Project.query().$promise.then(function (projects) {            $scope.projects = projects.reduce(function (memo, curr) {                memo[curr.id] = curr;                return memo;            }, {});        });        function buildFolderTree(folders){            folders.forEach(function (folder) {                folder.folders = folder.folders || [];                if(folder.parent_id){                    folders.some(function (parentFolder) {                        if(folder.parent_id === parentFolder.id){                            parentFolder.folders = parentFolder.folders || [];                            parentFolder.folders.push(folder);                            return true;                        }                    });                }            });            return folders.map(function (folder) {                if(folder.parent_id !== null) {                    return null;                }                return folder;            }).filter(function (folder) {                return folder !== null;            });        }        Folder.query({            parent_id: null        }).$promise.then(function (folders){            $scope.tree.folders =  buildFolderTree(folders) || [];        });        DataSource.query({            folder_id: 0        }).$promise.then(function(dataSources) {            $scope.tree.dataSources = dataSources || [];        });        $scope.selectDataSource = function(dataSource) {            $scope.selectedDataSourceId = dataSource.id;            $rootScope.$broadcast('selectedDataSourceChange', $scope.selectedDataSourceId);        };        $scope.deleteDataSource = function(){            DataSource.get({                id: $scope.selectedDataSourceId            }).$promise.then(function (ds) {                $scope.selectedDataSourceId = null;                $rootScope.$broadcast('deleteDataSource', ds.folder_id, ds.id);                DataSource.delete({                    id: ds.id                });            });        };    }]);adminApp.controller('newDataSourceModalCtrl', ['$scope', 'DataSource', 'Folder', '$modal',    function ($scope, DataSource, Folder, $modal) {        var newDataSourceModalInstanceCtrl = ['$scope', '$rootScope', 'Project', 'Folder', 'DataSource', '$modalInstance',            function ($scope, $rootScope, Project, Folder, DataSource, $modalInstance) {                $scope.newDataSource = {};                $scope.projects = Project.query();                $scope.folders = Folder.query();                $scope.ok = function () {                    DataSource.save($scope.newDataSource).$promise.then(function(id){                        $rootScope.$broadcast('newDatasource', $scope.newDataSource.folder_id, id);                        $modalInstance.close();                    });                };                $scope.cancel = function () {                    $modalInstance.dismiss('cancel');                };            }        ];        $scope.open = function (dashboard) {            var newDashboardModalInstance = $modal.open({                templateUrl: '/public/src/include/dataSource_new_modal.html',                controller: newDataSourceModalInstanceCtrl,                resolve: {                    dashboards: function () {                        return $scope.dashboards;                    }                }            });        };    }]);adminApp.controller('newFolderModalCtrl', ['$scope', '$modal',    function ($scope, $modal) {        var newFolderModalInstanceCtrl = ['$scope', '$rootScope', 'Folder', '$modalInstance',            function ($scope, $rootScope, Folder, $modalInstance) {                $scope.newFolder = {};                $scope.folders = Folder.query();                $scope.ok = function () {                    Folder.save($scope.newFolder).$promise.then(function (id) {                        $rootScope.$broadcast('newFolder', $scope.newFolder.parent_id, id);                        $modalInstance.close();                    });                };                $scope.cancel = function () {                    $modalInstance.dismiss('cancel');                };            }        ];        $scope.open = function (dashboard) {            var newFolderModalInstance = $modal.open({                templateUrl: '/public/src/include/folder_new_modal.html',                controller: newFolderModalInstanceCtrl,                resolve: {                    dashboards: function () {                        return $scope.dashboards;                    }                }            });        };    }]);adminApp.controller('treeNodeCtrl', ['$scope', '$timeout', '$rootScope', 'DataSource', 'Folder',    function($scope, $timeout, $rootScope, DataSource, Folder) {        $scope.onDrop = function (evt, ui) {            if ($rootScope.dropTimer) {                $timeout.cancel($rootScope.dropTimer);            }            $rootScope.dropTimer = $timeout(function () {                var dragObj = $rootScope.dragObj;                var type = dragObj.type;                var obj = dragObj.obj || {};                var idx = null;                var oldTreeWrapper = null;                if (type === 'data_source') {     //dragObj is dataSource                    oldTreeWrapper = dragObj.treeWrapper;                    if (obj.folder_id === $scope.treeWrapper.id) {                        angular.element(ui.draggable[0]).removeAttr('style');                        return;                    }                    //update database                    obj.folder_id = $scope.treeWrapper.id === 0 ? null : $scope.treeWrapper.id;                    DataSource.update({                        id: obj.id                    }, obj);                    //update angular data                    idx = oldTreeWrapper.dataSources.indexOf(obj);                    if (idx === -1) {                        return;                    }                    oldTreeWrapper.dataSources.splice(idx, 1);                    $scope.treeWrapper.dataSources.splice(0, 0, obj);                }                else if (type === 'folder') {          //dragObj is folder                    oldTreeWrapper = dragObj.outerTreeWrapper;                    if (obj.parent_id === $scope.treeWrapper.id) {                        angular.element(ui.draggable[0]).removeAttr('style');                        return;                    }                    //update database                    obj.parent_id = $scope.treeWrapper.id;                    var copyObj = unWrapFolder(obj);                    Folder.update({                        id: obj.id                    }, copyObj);                    //update angular data                    idx = oldTreeWrapper.folders.indexOf(obj);                    if (idx === -1) {                        return;                    }                    oldTreeWrapper.folders.splice(idx, 1);                    $scope.treeWrapper.folders.splice(0, 0, obj);                }            }, 25);        };        $scope.$on('newDatasource', function (event, folderId, dataSourceId) {            if (!folderId && $scope.treeWrapper.id) {                return;            }            if (folderId && folderId !== $scope.treeWrapper.id) {                return;            }            DataSource.get(dataSourceId).$promise.then(function (dataSource) {                $scope.treeWrapper.dataSources.push(dataSource);            });        });        $scope.$on('newFolder', function (event, parentFolderId, folderId) {            if (!parentFolderId && $scope.treeWrapper.id) {                return;            }            if (parentFolderId && parentFolderId !== $scope.treeWrapper.id) {                return;            }            Folder.get(folderId).$promise.then(function (folder) {                var wrappedFolder = wrapFolder(folder);                $scope.treeWrapper.folders.push(wrappedFolder);            });        });        $scope.$on('deleteFolder', function (event, parentFolderId, folderId, isRecursive, deletedFolderTreeWrapper) {            if (!parentFolderId && $scope.treeWrapper.id) {                return;            }            if (parentFolderId && parentFolderId !== $scope.treeWrapper.id) {                return;            }            $scope.treeWrapper.folders.some(function (folder, idx) {                if (folder.id === folderId) {                    if (!isRecursive) {                        $scope.treeWrapper.folders = $scope.treeWrapper.folders.concat(deletedFolderTreeWrapper.folders || []);                        $scope.treeWrapper.dataSources = $scope.treeWrapper.dataSources.concat(deletedFolderTreeWrapper.dataSources || []);                    }                    $scope.treeWrapper.folders.splice(idx, 1);                    return true;                }            });        });        $scope.$on('updateDataSource', function (event, folderId, dataSourceId) {            if (!folderId && $scope.treeWrapper.id) {                return;            }            if (folderId && folderId !== $scope.treeWrapper.id) {                return;            }            DataSource.get({                id: dataSourceId            }).$promise.then(function (dataSource) {                $scope.treeWrapper.dataSources.some(function (ds) {                    if (ds.id === dataSource.id) {                        ds.name = dataSource.name;                        return true;                    }                });            });        });        $scope.$on('deleteDataSource', function (event, folderId, dataSourceId) {            if (!folderId && $scope.treeWrapper.id) {                return;            }            if (folderId && folderId !== $scope.treeWrapper.id) {                return;            }            $scope.treeWrapper.dataSources.some(function(ds, idx) {                if(ds.id === dataSourceId){                    $scope.treeWrapper.dataSources.splice(idx, 1);                    return true;                }            });        });    }]);adminApp.controller('folderItemCtrl', ['$scope', '$timeout', '$rootScope', 'Folder', 'DataSource',    function ($scope, $timeout, $rootScope, Folder, DataSource) {        $scope.isCollapsed = true;        $scope.isMouseOver = false;        $scope.isEdit = false;        function queryTree(folder) {            var ret = {                id: folder.id,                folders: folder.folders,                dataSources: DataSource.query({                    folder_id: folder.id                })            };            return ret;        }        $scope.treeWrapper = queryTree($scope.folder);        $scope.toggleCollapse = function () {            $scope.isCollapsed = !$scope.isCollapsed;        };        $scope.editFolder = function () {           $scope.isEdit = true;        };        $scope.saveFolder = function () {            var folder = unWrapFolder($scope.folder);            Folder.update({                id: folder.id            }, folder).$promise.then(function () {                $scope.isEdit = false;            });        };        $scope.onDrag = function ($outerTreeWrapper) {            $rootScope.dragObj = {                type: 'folder',                obj: $scope.folder,                outerTreeWrapper: $scope.outerTreeWrapper,                treeWrapper: $scope.treeWrapper            };        };        $scope.onDrop = function(evt, ui) {            if ($rootScope.dropTimer) {                $timeout.cancel($rootScope.dropTimer);            }            $rootScope.dropTimer = $timeout(function () {                var dragObj = $rootScope.dragObj;                var type = dragObj.type;                var obj = dragObj.obj || {};                var oldTreeWrapper = null;                var idx = null;                if(type === 'data_source'){     //dragObj is dataSource                    oldTreeWrapper = dragObj.treeWrapper;                    if(obj.folder_id === $scope.folder.id){                        angular.element(ui.draggable[0]).removeAttr('style');                        return;                    }                    //update database                    obj.folder_id = $scope.folder.id === 0 ? null: $scope.folder.id;                    DataSource.update({                        id: obj.id                    },obj);                    //update angular data                    idx = oldTreeWrapper.dataSources.indexOf(obj);                    if(idx === -1){                        return ;                    }                    oldTreeWrapper.dataSources.splice(idx, 1);                    $scope.treeWrapper.dataSources.splice(0, 0, obj);                }                else if(type === 'folder'){          //dragObj is folder                    oldTreeWrapper = dragObj.outerTreeWrapper;                    if(obj.parent_id === $scope.folder.id) {                        angular.element(ui.draggable[0]).removeAttr('style');                        return ;                    }                    //update database                    obj.parent_id = $scope.folder.id;                    var copyObj = unWrapFolder(obj);                    Folder.update({                        id: obj.id                    }, copyObj);                    //update angular data                    idx = oldTreeWrapper.folders.indexOf(obj);                    if(idx === -1){                        return ;                    }                    oldTreeWrapper.folders.splice(idx, 1);                    $scope.treeWrapper.folders.splice(0, 0, obj);                }            }, 25);        };    }]);adminApp.controller('dataSourceItemCtrl', ['$scope', '$rootScope',    function ($scope, $rootScope) {        $scope.onDrag = function () {            $rootScope.dragObj = {                type: 'data_source',                obj: $scope.dataSource,                treeWrapper: $scope.treeWrapper            };        };    }]);adminApp.controller('NavCtrl', function ($scope, $rootScope) {    $scope.active = 'dashboard';    $rootScope.$on('$routeChangeSuccess', function(current, routes){        if(routes.loadedTemplateUrl === '/public/src/dataSource.html'){            $scope.active = 'dataSource';        }        else if(routes.loadedTemplateUrl === '/public/src/dashboard.html'){            $scope.active = 'dashboard';        }    });});/************************** dataSource Controllers *****************************/var dataSourceControllers = angular.module('dataSourceControllers', [    'services']);dataSourceControllers.controller('dataSourceInfoCtrl', ['$scope', '$rootScope', 'DataSource', 'Project',    function($scope, $rootScope, DataSource, Project) {        $scope.dataSource = null;        $scope.projects = Project.query();        $scope.$on('selectedDataSourceChange', function(event, dataSourceId) {            $scope.dataSource = DataSource.get({                id: dataSourceId            });        });        $scope.invalid = {};        $scope.submit = function () {           DataSource.update({               id: $scope.dataSource.id           }, $scope.dataSource).$promise.then(function(dataSource){                $rootScope.$broadcast('updateDataSource', dataSource.folder_id, dataSource.id);            });        };    }]);dataSourceControllers.controller('dataSourceMethodCtrl', ['$scope', '$rootScope', 'RecordSave', 'Project', 'DataSource',    function ($scope, $rootScope, RecordSave, Project, DataSource) {        $scope.dataSource = null;        $scope.project = null;        $scope.showJsonExample = JSON.stringify({            value: 100,            year: 2014,            month: 7,            day: 3,            hour: 16,            minute: 0,            second: 0        }, null, 4);        $scope.data = angular.copy($scope.showJsonExample);        $scope.$on('selectedDataSourceChange', function(event, dataSourceId) {            DataSource.get({                id: dataSourceId            }).$promise.then(function (dataSource) {                $scope.dataSource = dataSource;                $scope.project = Project.get({                    id: dataSource.project_id                });            });        });        $scope.submit = function(){            var data = JSON.parse($scope.data);            RecordSave.save({                uuid: $scope.project.uuid,                key: $scope.dataSource.key            }, data).$promise.then(function (record) {                $rootScope.$broadcast('newRecord', record);            });        };    }]);dataSourceControllers.controller('dataSourceRecordListCtrl', ['$rootScope', '$scope', 'Record', 'DataSource', 'RecordDelete',    function($rootScope, $scope, Record, DataSource, RecordDelete){        $scope.$on('selectedDataSourceChange', function(event, dataSourceId) {            $scope.records = Record.query({                id: dataSourceId,                limit: 10            });        });        $scope.getDataSource = function(id){            return DataSource.get({                id: id            });        };        $scope.delete = function (record) {            //删除Record后刷新Record List            RecordDelete.delete({                id: record.id            }).$promise.then(function () {                var idx = $scope.records.indexOf(record);                if (idx === -1) {                    return;                }                $scope.records.splice(idx, 1);            });        };        $rootScope.$on('newRecord', function (event, record) {            $scope.records.unshift(record);        });    }]);////dataSourceControllers.controller('confirmDeleteDataSourceCtrl', ['$scope', '$modal',//    function($scope, $modal){//        var deleteConfirmModalInstanceCtrl = ['$scope', '$q', 'DataSource', '$modalInstance', 'dataSource', 'dataSources',//            function ($scope, $q, DataSource, $modalInstance, dataSource, dataSources) {//                $scope.ok = function(){//                    var idx = dataSources.indexOf(dataSource);//                    if(idx === -1){//                        $modalInstance.close();//                    }////                    dataSources.splice(idx, 1);//                    DataSource.delete({//                        id: dataSource.id//                    }).$promise.then(function () {//                        $modalInstance.close();//                    });//                };////                $scope.cancel = function(){//                    $modalInstance.dismiss('cancel');//                };//            }//        ];////        $scope.open = function (dataSource) {//            var deleteConfirmModalInstance = $modal.open({//                templateUrl: '/public/src/include/confirm_delete_modal.html',//                controller: deleteConfirmModalInstanceCtrl,//                resolve: {//                    dataSource: function () {//                        return dataSource;//                    },//                    dataSources: function () {//                        return $scope.treeWrapper.dataSources;//                    }//                }//            });//        };//    }//]);adminApp.controller('confirmDeleteFolderCtrl', ['$scope', '$modal',    function ($scope, $modal) {        var deleteConfirmModalInstanceCtrl = ['$rootScope', '$scope', '$q', 'Folder', '$modalInstance', 'folder', 'deletedFolderTreeWrapper',            function ($rootScope, $scope, $q, Folder, $modalInstance, folder, deletedFolderTreeWrapper) {                $scope.ok = function(isRecursive){                    Folder.delete({                        id: folder.id,                        recursive: isRecursive || false                    }).$promise.then(function () {                        $rootScope.$broadcast('deleteFolder', folder.parent_id, folder.id, isRecursive, deletedFolderTreeWrapper);                        $modalInstance.close();                    });                };                $scope.cancel = function(){                    $modalInstance.dismiss('cancel');                };            }        ];        $scope.open = function (folder, treeWrapper) {            var deleteConfirmModalInstance = $modal.open({                templateUrl: '/public/src/include/folder_confirm_delete_modal.html',                controller: deleteConfirmModalInstanceCtrl,                resolve: {                    folder: function () {                        return folder;                    },                    deletedFolderTreeWrapper : function(){                        return treeWrapper;                    }                }            });        };    }]);adminApp.directive('sticky', [    function () {        var $window = angular.element(window);        var $document = angular.element(document);        var getScrollTop = function () {            return Math.min($window.scrollTop(), $document.height() - window.innerHeight);        };        return {            restrict: 'A',            link: function ($scope, $elem) {                /* --------------------  size ----------------------- */                var onResize = function () {                    if ($window.width() < 960) {                        $elem.removeAttr('style');                        return;                    }                    if (!$elem.hasClass('fixed')) {                        var height = $window.height() - $elem.offset().top;                        $elem.height(height);                    }                };                /* -------------------- scroll ----------------------- */                var top = null;                var onScroll = function () {                    if ($window.width() < 960) {                        $elem.removeAttr('style');                        return;                    }                    if (!top) {                        top = $elem.offset().top;                    }                    var fixed = $elem.hasClass('fixed');                    var shouldFixed = getScrollTop() >= top;                    if (!fixed && shouldFixed) {                        $elem.addClass('fixed');                        $elem.removeAttr('style');                    } else if (fixed && !shouldFixed) {                        $elem.removeClass('fixed');                    }                    if (!shouldFixed) {                        var height = $window.height() - $elem.offset().top + getScrollTop();                        $elem.height(height);                    }                };                /* -------------------- dom change ----------------------- */                var onDomeChange = _.debounce(onResize, 100);                var observer = new MutationObserver(onDomeChange);                observer.observe(document.body, {                    attributes: true,                    attributeFilter: [                        'class'                    ],                    childList: true,                    subtree: true                });                /* --------------------  events ----------------------- */                $window.on('resize', onResize);                $window.on('scroll', onScroll);                $scope.$on('$destroy', function () {                    $window.off('resize', onResize);                    $window.off('scroll', onScroll);                    observer.disconnect();                });            }        };    }]);