// Initialise columns/* * Widget: Column * 	type: 5 */'use strict';$(function () {    $('.widget[data-type=5]').each(function () {        var config = $(this).data('config');        var $container = $(this).find('.content');        var timeLine = [];        config.dataInfos = config.dataInfos || [];        function reload () {           var chart = this;           var promises = config.dataInfos.map(function(dataInfo){               return $.get('/api/data_sources/' + dataInfo.id)                   .then(function(dataSource){                       return $.get('/api/data_sources/' + dataSource.id + '/records?limit=' + config.limit)                           .then(function(records){                               return {                                   dataSource: dataSource,                                   records: (function(){                                       return records.map(function(record) {                                           return record;                                       } );                                   })()                               };                           });                   });           });           $.when.apply(this,promises).then(function() {               var results = Array.prototype.slice.apply(arguments);               var sortedMultiRecords = sortMultiRecords(                   (function(){                       return results.map(function(result){                           return result.records;                       });                   })(),                   {                       formatDate: formatDate                   }               );               var dataSeries = results.map(function(result, idx){                   return {                       name: result.dataSource.name,                       color: defaultColors[(idx >= defaultColors.length ? (idx % defaultColors.length) : idx)],                       data: sortedMultiRecords[idx].map(                           function(record){                               return record.value;                           })                   };               });               timeLine = (sortedMultiRecords && sortedMultiRecords.length > 0) ? (function(){                   return sortedMultiRecords[0].map(function(record){                       return record.time;                   });               })() : [];               dataSeries.forEach(function(seriesObj) {                   seriesObj.data.reverse();               });               timeLine.reverse();               //update data               chart.xAxis[0].setCategories(timeLine);               if(!chart.series || chart.series.length === 0){                   chart.series = [];                   dataSeries.forEach(function(seriesObj){                       chart.addSeries(seriesObj);                   });                   chart.yAxis[0].update({                       gridLineWidth: 1                   });                   chart.redraw();               }else{                   chart.series.forEach(function(seriesObj, idx){                       seriesObj.setData(dataSeries[idx].data);                   });               }           });        }        $container.highcharts({            chart: {                type: 'column',                backgroundColor: '#2b2b2b',                events: {                    load: function(){                        reload.apply(this);                        // set up the updating of the chart each reloadInterval                       setInterval(reload.bind(this), config.reloadInterval);                    }                }            },            title: {                text: null            },            legend: {                itemStyle: {                    color: 'white'                }            },            xAxis: {                categories: [],                lineColor: 'rgb(102, 108, 103)'            },            yAxis: {                title: {                    text: null                },                gridLineColor: 'rgb(102, 108, 103)',                gridLineWidth: 0            },            tooltip: {                headerFormat: '<span style="font-size:12px">{point.key}</span><table>',                pointFormat: '<tr style="font-size: 10px"><td style="color:{series.color};padding:0">{series.name}: </td>' +                    '<td style="padding: 0; color: #000000"><b>{point.y}</b></td></tr>',                footerFormat: '</table>',                shared: true,                useHTML: true            },            plotOptions: {                column: {                    pointPadding: 0.2,                    borderWidth: 0                }            },            series: []        });    });});