// Initialise columns/* * Widget: Column * 	type: 5 */'use strict';$(function () {    $('.widget[data-type=5]').each(function () {        var config = $(this).data('config');        var $container = $(this).find('.content');        var timeLine = [];        var dataSeries = [];//        var latestRecordId = {};        config.dataInfos = config.dataInfos || [];        var promises = config.dataInfos.map(function(dataInfo){            return $.get('/api/data_sources/' + dataInfo.id)                .then(function(dataSource){                    return $.get('/api/data_sources/' + dataSource.id + '/records?limit=' + config.limit)                        .then(function(records){                            return {                                dataSource: dataSource,                                records: (function(){                                    return records.map(function(record) {                                        return record;                                    } );                                })()                            };                        });                });        });        $.when.apply(null,promises).then(function(){            var results = Array.prototype.slice.apply(arguments);            var sortedMultiRecords = sortMultiRecords(                (function(){                    return results.map(function(result){                        return result.records;                    });                })(),                {                    formatDate: formatDate                }            );            dataSeries = results.map(function(result, idx){                return {                    name: result.dataSource.name,                    color: defaultColors[(idx >= defaultColors.length ? (idx % defaultColors.length) : idx)],                    data: sortedMultiRecords[idx].map(                        function(record){                            return record.value;                        })                };            });            timeLine = (sortedMultiRecords && sortedMultiRecords.length > 0) ? (function(){                return sortedMultiRecords[0].map(function(record){                    return record.time;                });            })() : [];            //reverse: eldest record first            dataSeries.reverse();            timeLine.reverse();            console.log('dataSeries: ', dataSeries);            console.log('timeline: ', timeLine);            $container.highcharts({                chart: {                    type: 'column',                    backgroundColor: '#2b2b2b',                    events: {                        load: function(){//                            var series = this.series;                            // set up the updating of the chart each reloadInterval////                            setInterval(function () {////                                config.dataInfos.forEach(function (dataInfo, idx) {////                                    $.get('/api/data_sources/' + dataInfo.id).then(////                                        function (dataSource) {////                                            $.get('/api/data_sources/' + dataInfo.id + '/records?limit=' + config.limit).then(////                                                function (resp) {////                                                    var flag = false;////                                                    resp.reverse().filter(function (record) {////                                                        if (record.id === latestRecordId[dataSource.name]) {////                                                            flag = true;////                                                            return false;////                                                        }////////////                                                        if (flag) {////                                                            series[idx].addPoint([formatDate(record.date_time), record.value], true, true);////                                                        }////                                                    });////                                                    latestRecordId[dataSource.name] = resp[resp.length - 1].id;////                                                });////                                        });////                                });//                            }, config.reloadInterval);                        }                    }                },                title: {                    text: null                },                legend: {                    itemStyle: {                        color: 'white'                    }                },                xAxis: {                    categories: timeLine,                    lineColor: 'rgb(102, 108, 103)'                },                yAxis: {                    title: {                        text: null                    },                    gridLineColor: 'rgb(102, 108, 103)'                },                tooltip: {                    headerFormat: '<span style="font-size:12px">{point.key}</span><table>',                    pointFormat: '<tr style="font-size: 10px"><td style="color:{series.color};padding:0">{series.name}: </td>' +                        '<td style="padding: 0; color: #000000"><b>{point.y}</b></td></tr>',                    footerFormat: '</table>',                    shared: true,                    useHTML: true                },                plotOptions: {                    column: {                        pointPadding: 0.2,                        borderWidth: 0                    }                },                series: dataSeries            });        });    });});