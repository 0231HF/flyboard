/** * Created by sly on 14-6-27. */'use strict';function getTimeFromRecord(record) {    return new Date(record.year, record.month - 1, record.day, record.hour, record.minute, record.second).getTime();}// Initialise sparklines/* *	Copy the each() function for each sparkline you have * 	e.g. $('#spark-1').each(function(){.....} *///display: chartfunction statChart() {    $('.stat-chart').each(function () {        var config = $(this).data('config');        var latestRecordId = {};        Highcharts.setOptions({            global: {                useUTC: false            }        });        var $container = $(this).find('.content');        config.dataInfos = config.dataInfos || [];        var promises = config.dataInfos.map(function (dataInfo, index) {            return $.get(                    '/api/data_sources/' + dataInfo.id            ).then(function (dataSource) {                    return $.get(                            '/api/data_sources/' + dataInfo.id + '/records?period=' + (config.period || undefined)                    ).then(function (resp) {                            var lineOpt = {};                            lineOpt.name = dataSource.name;                            index = index >= defaultColors.length ? (index % defaultColors.length) : index;                            lineOpt.color = defaultColors[index];                            lineOpt.data = [];                            resp = resp || [];                            latestRecordId[dataSource.name] = resp[0].id;                            resp.reverse().forEach(function (record) {                                lineOpt.data.push({                                    x: getTimeFromRecord(record),                                    y: record.value                                });                            });                            return lineOpt;                        }                    );                });        });        $.when.apply(this, promises).done(function () {            var dataSeries = Array.prototype.slice.apply(arguments);            $container.highcharts({                chart: {                    type: 'spline',                    animation: Highcharts.svg, // don't animate in old IE                    marginRight: 10,                    events: {                        load: function () {                            var series = this.series;                            // set up the updating of the chart each second                            setInterval(function () {                                config.dataInfos.forEach(function (dataInfo, idx) {                                    $.get(                                            '/api/data_sources/' + dataInfo.id,                                        function (dataSource) {                                            $.get(                                                    '/api/data_sources/' + dataInfo.id + '/records?limit=' + config.limit,                                                function (resp) {                                                    var flag = false;                                                    resp.reverse().filter(function (record) {                                                        if (record.id === latestRecordId[dataSource.name]) {                                                            flag = true;                                                            return false;                                                        }                                                        if (flag) {                                                            series[idx].addPoint([getTimeFromRecord(record), record.value], true, true);                                                        }                                                    });                                                    latestRecordId[dataSource.name] = resp[resp.length - 1].id;                                                });                                        });                                });                            }, config.reloadInterval);                        }                    }                },                title: {                    text: ''                },                xAxis: {                    type: 'datetime',                    tickPixelInterval: 150,                    lineColor: 'rgb(102, 108, 103)'                },                yAxis: {                    title: null,                    gridLineColor: 'rgb(102, 108, 103)',                    plotLines: [                        {                            value: 0,                            width: 1,                            color: '#808080'                        }                    ]                },                tooltip: {                    crosshairs: true,                    shared: true                },                legend: {                    layout: 'vertical',                    align: 'left',                    verticalAlign: 'middle',                    y: 0,                    borderWidth: 0,                    itemStyle: {                        color: 'black'                    }                },                exporting: {                    enabled: false                },                series: dataSeries,                plotOptions: {                    spline: {                        colors: defaultColors,                        dataLabels: {                            enabled: true,                            color: 'darkblack',                            formatter: function () {                                if (this.point.x === this.series.data[this.series.data.length - 1].x) {                                    return this.y;                                } else {                                    return null;                                }                            }                        }                    },                    series: {                        turboThreshold: config.limit                    }                }            });        });    });}/************************** App modlue *****************************/var statApp = angular.module('statApp', [    'ngRoute',    'services']);statApp.controller('NavCtrl', ['$scope', '$q', '$window', 'DataSource',    function ($scope, $q, $window, DataSource) {        var params = $window.location.search.substr(1).split('&').reduce(function (memo, item) {            item = item.split('=');            memo[item[0]] = item[1];            return memo;        }, {});        $scope.displayedDataSources = [];        $scope.isChanged = false;        var promises = params.dataSourceIds.split(',').map(function (id) {            return DataSource.get({                id: id            }).$promise.then(function (dataSource) {                $scope.displayedDataSources.push(dataSource);            });        });        $q.all(promises).then(function(){            $scope.backupDisplayedDataSources = angular.copy($scope.displayedDataSources);            statChart();            DataSource.query().$promise.then(function (dataSources) {                $scope.displayedDataSources.forEach(function(displayeddataSource){                    dataSources.forEach(function(ds, idx){                        if(ds.id === displayeddataSource.id){                            dataSources.splice(idx, 1);                        }                    });                });                $scope.dataSources = dataSources;                $scope.backupDataSources = angular.copy($scope.dataSources);            });        });        $scope.addDataSource = function (dataSource) {            var idx = $scope.dataSources.indexOf(dataSource);            if(idx === -1){                return ;            }            $scope.dataSources.splice(idx, 1);            $scope.displayedDataSources.push(dataSource);            $scope.isChanged = true;        };        $scope.delDataSource = function (dataSource) {            var idx = $scope.displayedDataSources.indexOf(dataSource);            if (idx === -1) {                return;            }            $scope.displayedDataSources.splice(idx, 1);            $scope.dataSources.push(dataSource);            $scope.isChanged = true;        };        $scope.ok = function () {            params.dataSourceIds = $scope.displayedDataSources.map(function (ds) {                return ds.id;            }).join(',');            var newParamsStr = Object.keys(params).reduce(function (memo, item) {                memo.push(item + '=' + params[item]);                return memo;            }, []).join('&');            $window.location = $window.location.pathname + '?' + newParamsStr;            $scope.isChanged = false;        };        $scope.cancel = function () {            $scope.displayedDataSources = angular.copy($scope.backupDisplayedDataSources);            $scope.dataSources = angular.copy($scope.backupDataSources);            $scope.isChanged = false;        };    }]);