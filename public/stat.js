/*** Created by sly on 14-6-27.*/'use strict';var defaultColors = ['rgb(47,179,202)', 'rgb(241, 86, 79)', 'rgb(246,150,84)', 'rgb(252,238,33)', 'rgb(124,188,30)'];var periodTypes = [    {        text: '今日',        value: '0,1'    },    {        text: '昨日',        value: '1,2'    },    {        text: '7天',        value: '0,7'    },    {        text: '30天',        value: '0,30'    },    {        text: '90天',        value: '0,90'    },    {        text: '180天',        value: '0,180'    },    {        text: '360天',        value: '0,360'    }];function getTimeFromRecord(record) {    return new Date(record.year, record.month - 1, record.day, record.hour, record.minute, record.second).getTime();}function createUrlParamsString(paramsObj){    return Object.keys(paramsObj).reduce(function (memo, item) {        memo.push(item + '=' + paramsObj[item]);        return memo;    }, []).join('&');}//draw chartfunction draw (callback) {    var multiRecords = [];              //record list    $('.stat-chart').each(function () {        var config = $(this).data('config');        Highcharts.setOptions({            global: {                useUTC: false            }        });        var $container = $(this).find('.content');        config.dataInfos = config.dataInfos || [];        var promises = config.dataInfos.map(function (dataInfo, index) {            return $.get(                    '/api/data_sources/' + dataInfo.id            ).then(function (dataSource) {                    return $.get(                            '/api/data_sources/' + dataInfo.id + '/records?period=' + (config.period || undefined)                    ).then(function (resp){                            //data:  record list                            multiRecords.push({                                dataSource: dataSource,                                records: resp                            });                            //data:  chart                            var lineOpt = {};                            if(resp.length > 0){                                lineOpt.name = dataSource.name;                                index = index >= defaultColors.length ? (index % defaultColors.length) : index;                                lineOpt.color = defaultColors[index];                                lineOpt.data = [];                                resp = resp || [];                                resp.reverse().forEach(function (record) {                                    lineOpt.data.push({                                        x: getTimeFromRecord(record),                                        y: record.value                                    });                                });                            }                            return lineOpt;                        }                    );                });        });        $.when.apply(this, promises).done(function () {            //init records list    --- sort multiRecords && init $scope.multiRecords            function initMultiRecords(){                var unSortedMultiRecords = [];                multiRecords.forEach(function (result, idx) {                    unSortedMultiRecords[idx] = result.records;                });                var sortedMultiRecords = recordsSort(unSortedMultiRecords);                multiRecords.forEach(function (result, idx) {                    result.records = sortedMultiRecords[idx];                });                callback(multiRecords, config);            }            initMultiRecords();            //init chart            var dataSeries = Array.prototype.slice.apply(arguments);            $container.highcharts({                chart: {                    type: 'spline',                    animation: Highcharts.svg, // don't animate in old IE                    marginRight: 10,                    events: {                        load: function () {                        }                    }                },                title: {                    text: ''                },                xAxis: {                    type: 'datetime',                    tickPixelInterval: 150,                    lineColor: 'rgb(102, 108, 103)'                },                yAxis: {                    title: null,                    gridLineColor: 'rgb(102, 108, 103)',                    plotLines: [                        {                            value: 0,                            width: 1,                            color: '#808080'                        }                    ]                },                tooltip: {                    crosshairs: true,                    shared: true                },                legend: {                    layout: 'horizontal',                    align: 'center',                    verticalAlign: 'bottom',                    borderWidth: 0,                    itemDistance: 30,                    itemStyle: {                        color: 'black'                    }                },                exporting: {                    enabled: false                },                series: dataSeries,                plotOptions: {                    spline: {                        colors: defaultColors,                        dataLabels: {                            enabled: true,                            color: 'darkblack',                            formatter: function () {                                if (this.point.x === this.series.data[this.series.data.length - 1].x) {                                    return this.y;                                } else {                                    return null;                                }                            }                        }                    },                    series: {                        turboThreshold: config.limit                    }                }            });        });    });}function recordsSort(multiRecords) {    var sortedMultiRecords = [];    var stopFlag = false;    var pointers = [];    multiRecords.forEach(function (records, idx) {        pointers[idx] = 0;        sortedMultiRecords[idx] = [];    });    /*jshint loopfunc:true*/    while (!stopFlag) {        var max = null;        var newRecords = [];        multiRecords.forEach(function (records, idx) {            var pointer = pointers[idx];            if (pointer >= records.length) {                return;            }            var time = new Date(                    records[pointer].year || 0,                    records[pointer].month || 0,                    records[pointer].day || 0,                    records[pointer].hour || 0,                    records[pointer].minute || 0,                    records[pointer].second || 0).getTime();            if (max === null || max < time) {                max = time;                newRecords = [idx];            }            else if (max === time) {                newRecords.push(idx);            }        });        if (max === null) {            stopFlag = true;            continue;        }        multiRecords.forEach(function (records, idx) {            if (newRecords.indexOf(idx) === -1) {                sortedMultiRecords[idx].push({                    time: new Date(max),                    value: '--'                });            }            else {                sortedMultiRecords[idx].push({                    time: new Date(max),                    value: records[pointers[idx]].value                });                pointers[idx] = pointers[idx] + 1;            }        });    }    return sortedMultiRecords;}/************************** App modlue *****************************/var statApp = angular.module('statApp', [    'ngRoute',    'services']);statApp.controller('statCtrl', ['$scope', '$q', '$window', 'DataSource', 'Record',    function ($scope, $q, $window, DataSource, Record) {        var params = $window.location.search.substr(1) !== '' ?            (function() {                return $window.location.search.substr(1).split('&').reduce(function (memo, item) {                    item = item.split('=');                    memo[item[0]] = item[1];                    return memo;                }, {});            })() : {};        $scope.isChanged = false;        $scope.dataSources = DataSource.query();        $scope.periodTypes = periodTypes;        $scope.isDataAlready = false;        var dataSourceIds = params.dataSourceIds ?            (function () {                var ids = params.dataSourceIds.split(',');                ids.forEach(function (id, idx) {                    ids[idx] = parseInt(id, 10);                });                return ids || [];            }()) : [];        $scope.selectedDataSources = dataSourceIds.map(function (id) {            return DataSource.get({                id: id            });        });        $scope.unSelectedDataSource = function () {            return $scope.dataSources.filter(function (ds) {                return !$scope.selectedDataSources.some(function (item) {                    return item.id === ds.id;                });            });        };        //show data        draw(function (multiRecords, config) {            $scope.multiRecords = multiRecords;            $scope.isDataAlready = true;            $scope.$apply();            //set max number of points displayed in chart            config.limit = (multiRecords && multiRecords.length > 0 && multiRecords[0].records) ?                multiRecords[0].records.length: null;        });        $scope.addDataSource = function (dataSource) {            $scope.selectedDataSources.push(dataSource);            $scope.isChanged = true;        };        $scope.delDataSource = function (dataSource) {            var idx = $scope.selectedDataSources.indexOf(dataSource);            if (idx === -1) {                return;            }            $scope.selectedDataSources.splice(idx, 1);            $scope.isChanged = true;        };        $scope.ok = function(){            params.dataSourceIds = $scope.selectedDataSources.map(function (ds) {                return ds.id;            }).join(',');            $window.location.href = $window.location.pathname + '?' + createUrlParamsString(params);            $scope.isChanged = false;        };        $scope.setPeriod = function(period){            params.period = period;            $window.location.href = $window.location.pathname + '?' + createUrlParamsString(params);        };    }]);