/** * Created by sly on 9/24/14. */'use strict';var directives = angular.module('directives', [    'ngRoute',    'services',    'ui.bootstrap']);directives.directive('aggregationAndFilter', [ 'Record',    function (Record) {        return {            restrict: 'A',            scope: {                type: '@type',                dataSource: '=source',                dataInfo: '=info',                widgetType: '=widgetType'            },            templateUrl: 'public/src/include/aggregation_and_filter_directive.html',            link: function ($scope, $elem) {                var oldDataSourceId = $scope.dataInfo.id;                if ($scope.dataSource && (!$scope.dataInfo.dimensions || $scope.dataInfo.dimensions.length === 0)) {                    $scope.dataInfo.dimensions = $scope.dataInfo.dimensions || [];                    $scope.dataSource.config.dimensions = $scope.dataSource.config.dimensions || [];                    $scope.dataSource.config.dimensions.forEach(function (dimension, idx) {                        $scope.dataInfo.dimensions[idx] = {                            key: dimension.key,                            name: dimension.name,                            value: null                        };                    });                }                $scope.init = function (dataSource, idx) {                    if (oldDataSourceId !== dataSource.id) {                        $scope.dataInfo.id = dataSource.id;                        $scope.dataInfo.dimensions = $scope.dataInfo.dimensions || [];                        $scope.dataInfo.dimensions.splice(0);                        dataSource.config.dimensions.forEach(function (dimension, idx) {                            $scope.dataInfo.dimensions[idx] = {                                key: dimension.key,                                name: dimension.name,                                value: null                            };                        });                        oldDataSourceId = $scope.dataInfo.id;                    }                    return Record.query({                        id: $scope.dataSource.id,                        distinct: 'dim' + (idx + 1)                    });                };            }        };    }]);directives.directive('includeReplace', function () {    return {        require: 'ngInclude',        restrict: 'A',        link: function (scope, el) {            el.replaceWith(el.children());        }    };});directives.directive('selectDataSource', ['DataSource', 'SubFolder', 'Record',    function (DataSource, SubFolder, Record) {        return {            restrict:'E',            scope: {                dataInfo: '=ngModel',                dataSourceMap: '=map',                opType: '@opType',                projectId: '='            },            templateUrl: 'public/src/include/select_dataSource_directive.html',            link: function ($scope, $elem, $attr) {                $scope.dataInfo = $scope.dataInfo || {};                $scope.dimensionValues = [];                var oldDataSourceId = null;                var folderQuery = {                    parent_id: 0                };                var dataSourceQuery = {                    folder_id: 0                };                if($scope.projectId){                    folderQuery.project_id = $scope.projectId;                    dataSourceQuery.project_id = $scope.projectId;                }                //init dataSource tree                $scope.treeWrapper = {};                $scope.treeWrapper.folders = SubFolder.query(folderQuery);                $scope.treeWrapper.dataSources = DataSource.query(dataSourceQuery);                //init dimensions                function initDimensions() {                    if(!$scope.dataInfo.id){                        return ;                    }                    var dataSource = $scope.dataSourceMap[$scope.dataInfo.id];                    if (!$scope.dataInfo || !$scope.dataInfo.id || !dataSource.config.dimensions || dataSource.config.dimensions.length === 0) {                        $scope.dataInfo.dimensions = [];                        $scope.dimensionValues = [];                    } else {                        //initial: if not first time call, or first time call, but dataInfo.dimensions is missed                        if(oldDataSourceId || !$scope.dataInfo.dimensions || !$scope.dataInfo.dimensions.length){                            $scope.dataInfo.dimensions = dataSource.config.dimensions.map(function (dimension) {                                return {                                    key: dimension.key,                                    name: dimension.name,                                    value: null                                };                            });                        }                        $scope.dimensionValues = dataSource.config.dimensions.map(function (dimension){                            return null;                        });                    }                    oldDataSourceId = $scope.dataInfo.id;                }                initDimensions();                $scope.selectDataSource = function (dataSource) {                    if(dataSource.id !== $scope.dataInfo.id){                        $scope.dataInfo.id = dataSource.id;                        initDimensions();                    }                };                $scope.getDimensionValues = function (dataSourceId, idx) {                    return Record.query({                        id: dataSourceId,                        distinct: 'dim' + (idx + 1)                    });                };            }        };    }]);directives.directive('sticky', [    function () {        var $window = angular.element(window);        var $document = angular.element(document);        var getScrollTop = function () {            return Math.min($window.scrollTop(), $document.height() - window.innerHeight);        };        return {            restrict: 'A',            link: function ($scope, $elem) {                /* --------------------  size ----------------------- */                var onResize = function () {                    if ($window.width() < 960) {                        $elem.removeAttr('style');                        return;                    }                    if (!$elem.hasClass('fixed')) {                        var height = $window.height() - $elem.offset().top;                        $elem.height(height);                    }                };                /* -------------------- scroll ----------------------- */                var top = null;                var onScroll = function () {                    if ($window.width() < 960) {                        $elem.removeAttr('style');                        return;                    }                    if (!top) {                        top = $elem.offset().top;                    }                    var fixed = $elem.hasClass('fixed');                    var shouldFixed = getScrollTop() >= top;                    if (!fixed && shouldFixed) {                        $elem.addClass('fixed');                        $elem.removeAttr('style');                    } else if (fixed && !shouldFixed) {                        $elem.removeClass('fixed');                    }                    if (!shouldFixed) {                        var height = $window.height() - $elem.offset().top + getScrollTop();                        $elem.height(height);                    }                };                /* -------------------- dom change ----------------------- */                var onDomeChange = _.debounce(onResize, 100);                var observer = new MutationObserver(onDomeChange);                observer.observe(document.body, {                    attributes: true,                    attributeFilter: [                        'class'                    ],                    childList: true,                    subtree: true                });                /* --------------------  events ----------------------- */                $window.on('resize', onResize);                $window.on('scroll', onScroll);                $scope.$on('$destroy', function () {                    $window.off('resize', onResize);                    $window.off('scroll', onScroll);                    observer.disconnect();                });            }        };    }]);directives.directive('nav', ['$location', '$window', 'Project', 'NavUrl', 'CurrentUser',    function ($location, $window, Project, NavUrl, CurrentUser) {        return {            restrict: 'A',            templateUrl: 'public/src/include/nav.html',            link: function ($scope, $elem, $attr) {                $scope.NavUrl = NavUrl;                if($window.location.pathname === '/login'){                    return ;                }                $scope.user = CurrentUser.get();                if($window.location.pathname === '/admin'){                    $scope.title = 'admin';                }                else if($window.location.pathname === '/stat'){                    $scope.title = 'stat';                }                Project.query().$promise.then(function (projects) {                    if(!projects){                        return ;                    }                    $scope.projects = projects;                    $scope.project = $location.search().projectId ?                        Project.get({                            id: $location.search().projectId                        })                        : projects[0];                });                $scope.selectProject = function (project) {                    if(project.id === $scope.project.id) {                        return ;                    }                    $scope.project = project;                    var newUrl = 'projectId=' + project.id;                    $location.search(newUrl);                };            }        };    }]);