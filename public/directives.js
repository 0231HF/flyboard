/** * Created by sly on 9/24/14. */'use strict';var directives = angular.module('directives', [    'ngRoute',    'services',    'ui.bootstrap']);directives.directive('aggregationAndFilter', [ 'Record',    function (Record) {        return {            restrict: 'A',            scope: {                type: '@type',                dataSource: '=source',                dataInfo: '=info',                widgetType: '=widgetType'            },            templateUrl: 'public/src/include/aggregation_and_filter_directive.html',            link: function ($scope, $elem) {                var oldDataSourceId = $scope.dataInfo.id;                if ($scope.dataSource && (!$scope.dataInfo.dimensions || $scope.dataInfo.dimensions.length === 0)) {                    $scope.dataInfo.dimensions = $scope.dataInfo.dimensions || [];                    $scope.dataSource.config.dimensions = $scope.dataSource.config.dimensions || [];                    $scope.dataSource.config.dimensions.forEach(function (dimension, idx) {                        $scope.dataInfo.dimensions[idx] = {                            key: dimension.key,                            name: dimension.name,                            value: null                        };                    });                }                $scope.init = function (dataSource, idx) {                    if (oldDataSourceId !== dataSource.id) {                        $scope.dataInfo.id = dataSource.id;                        $scope.dataInfo.dimensions = $scope.dataInfo.dimensions || [];                        $scope.dataInfo.dimensions.splice(0);                        dataSource.config.dimensions.forEach(function (dimension, idx) {                            $scope.dataInfo.dimensions[idx] = {                                key: dimension.key,                                name: dimension.name,                                value: null                            };                        });                        oldDataSourceId = $scope.dataInfo.id;                    }                    return Record.query({                        id: $scope.dataSource.id,                        distinct: 'dim' + (idx + 1)                    });                };            }        };    }]);directives.directive('includeReplace', function () {    return {        require: 'ngInclude',        restrict: 'A',        link: function (scope, el) {            el.replaceWith(el.children());        }    };});directives.directive('selectDataSource', ['DataSource', 'SubFolder', 'Record',    function (DataSource, SubFolder, Record) {        return {            restrict:'E',            scope: {                dataInfo: '=ngModel',                dataSourceMap: '=map',                opType: '@opType'            },            templateUrl: 'public/src/include/select_dataSource_directive.html',            link: function ($scope, $elem, $attr) {                $scope.dataInfo = $scope.dataInfo || {};                $scope.dimensionValues = [];                var oldDataSourceId = null;                //init dataSource tree                $scope.treeWrapper = {};                $scope.treeWrapper.folders = SubFolder.query({                    parent_id: 0                });                $scope.treeWrapper.dataSources = DataSource.query({                    folder_id: 0                });                //init dimensions                function initDimensions() {                    var dataSource = $scope.dataSourceMap[$scope.dataInfo.id];                    if (!$scope.dataInfo || !$scope.dataInfo.id || !dataSource.config.dimensions || dataSource.config.dimensions.length === 0) {                        $scope.dataInfo.dimensions = [];                        $scope.dimensionValues = [];                    } else {                        //initial: if not first time call, or first time call, but dataInfo.dimensions is missed                        if(oldDataSourceId || !$scope.dataInfo.dimensions || !$scope.dataInfo.dimensions.length){                            $scope.dataInfo.dimensions = dataSource.config.dimensions.map(function (dimension) {                                return {                                    key: dimension.key,                                    name: dimension.name,                                    value: null                                };                            });                        }                        $scope.dimensionValues = angular.copy(dataSource.config.dimensions);                    }                    oldDataSourceId = $scope.dataInfo.id;                }                initDimensions();                $scope.selectDataSource = function (dataSource) {                    if(dataSource.id !== $scope.dataInfo.id){                        $scope.dataInfo.id = dataSource.id;                        initDimensions();                    }                };                $scope.getDimensionValues = function (dataSourceId, idx) {                    return Record.query({                        id: dataSourceId,                        distinct: 'dim' + (idx + 1)                    });                };            }        };    }]);