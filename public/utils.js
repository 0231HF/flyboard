/* * variables and functions shared */'use strict';Highcharts.setOptions({    global: {        useUTC: false    }});//default colors used in widgetsvar defaultColors = [    'rgb(47,179,202)',  // 1 blue    'rgb(241, 86, 79)', // 2 red    'rgb(246,150,84)',  // 3 orange    'rgb(252,238,33)',  // 4 yellow    'rgb(124,188,30)',  // 5 green    'rgb(147,112,219)', // 6 purple    'rgb(65,105,225)',  // 7 darkblue    'rgb(240,128,128)', // 8 pink    'rgb(153,204,255)', // 9 lightblue    'rgb(51,204,153)',  // 10 grassgreen    'rgb(245,222,179)', // 11 wheat    'rgb(204,204,255)'  // 12 lightpurple];//format Time: xx年xx月xx日 xx:xx:xfunction formatTime (_date) {    function formatTimeElement(timeElement){        return (timeElement.toString().length === 1)? '0'+ timeElement: timeElement;    }    var date = new Date(_date);    return '' + date.getFullYear() + '-' + formatTimeElement(( date.getMonth() + 1 )) + '-' + formatTimeElement(date.getDate()) + '    '+ formatTimeElement(date.getHours()) + ':' + formatTimeElement(date.getMinutes()) + ':' + formatTimeElement(date.getSeconds());}//format Date: xxxxxxfunction formatDate (_date) {    function formatTimeElement(timeElement){        return (timeElement.toString().length === 1)? '0'+ timeElement: timeElement;    }    var date = new Date(_date);    return '' + date.getFullYear() + formatTimeElement((date.getMonth() + 1)) + formatTimeElement(date.getDate());}function getTimeFromRecord(record) {    return new Date(record.year, record.month - 1, record.day, record.hour, record.minute, record.second).getTime();}/** label: dataSource.name + dimensions' name */function additionalLabel(dataInfo, records) {    if (!dataInfo.dimensions || dataInfo.dimensions.length === 0 || !records || records.length === 0) {        return '';    }    var dimensionNameCombineStr = dataInfo.dimensions.map(function (dimension) {        if (dimension.value === 'sum') {            return null;        }        var value = dimension.value === 'ignore' ? records[0][dimension.key] : dimension.value;        return dimension.name + '(' + value + ')';    }).filter(function (item) {        return item !== null;    }).join('｜');    return dimensionNameCombineStr.length > 0 ? '-' + dimensionNameCombineStr : dimensionNameCombineStr;}