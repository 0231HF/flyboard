'use strict';var Folder = require('../../src/logicals/folder');var assert = require('chai').assert;var Promise = require('bluebird');var knex = require('../../src/lib/knex');describe('folder logical', function () {    var ids = [];    beforeEach(function (done) {        Promise.all([            Folder.save({                name: 'foo'            }),            Folder.save({                name: 'bar'            })        ])        .then(function(ret){            ids = ret;            done();        });    });    afterEach(function (done) {        knex('folders').del().then(function () {            done();        }).catch(done);    });    describe('#get', function () {        it('should return an object', function (done) {            Folder.get(ids[0]).then(function (ret) {                assert.isObject(ret);                assert.equal(ret.name, 'foo');                done();            }).catch(done);        });    });    describe('#find', function () {        it('should return a list', function (done) {            Folder.find().then(function (ret) {                assert.isArray(ret);                assert.equal(ret.length, 2);                done();            }).catch(done);        });    });    describe('#save', function () {        it('should save new object', function (done) {            Folder.save({                name: 'baz'            }).then(function (id) {                return Folder.get(id);            }).then(function (ret) {                assert.equal(ret.name, 'baz');                done();            }).catch(done);        });        it('should save new object has parent folder', function (done) {            Folder.save({                name: 'tan',                parent_id: ids[0]            }).then(function (id) {                return Folder.get(id);            }).then(function (ret) {                assert.equal(ret.name, 'tan');                return Folder.get(ret.parent_id);            }).then(function(ret){                assert.equal(ret.name, 'foo');                done();            }).catch(done);        });    });    describe('#update', function () {        it('should update a object', function (done) {            Folder.save({                name: 'baz'            }).then(function (id) {                return Folder.update(id, {                    name: 'xxx'                }).then(function () {                    return id;                });            }).then(function (ret) {                return Folder.get(ret);            }).then(function (ret) {                assert.equal(ret.name, 'xxx');                done();            }).catch(done);        });    });    describe('#remove', function () {        it('should delete object', function (done) {            Folder.remove(ids[0]).then(function () {                return Folder.get(ids[0]);            }).then(function (ret) {                assert.isUndefined(ret);                done();            }).catch(done);        });    });});