'use strict';var app = require('../../src/app');var request = require('supertest');var promisedRequest = require('supertest-as-promised');var User = require('../../src/logicals/user');var Role = require('../../src/logicals/role');var UserRole = require('../../src/logicals/userRole');var RolePrivilege = require('../../src/logicals/rolePrivilege');var Record = require('../../src/logicals/record');var DataSource = require('../../src/logicals/dataSource');var Project = require('../../src/logicals/project');var Folder = require('../../src/logicals/folder');var Promise = require('bluebird');var knex = require('../../src/lib/knex');var tokenGenerator = require('../../src/controllers/tokenGenerator');describe('folder controller', function(){    var userIds = [];    var roleIds = [];    var projectIds = [];    var dataSourceId = null;    var parentFolderIds = [];    var childrenFolderIds = [];    var recordId = null;    var tokens = [];    before(function (done) {        Promise.all([            Project.save({                name: 'ape'            }),            Project.save({                name: 'abc'            })        ]).then(function (ret) {            projectIds = ret;            return Promise.all([                User.save({                    email: 'abc@abc.com'                }),                User.save({                    email: 'ab@ab.com'                })            ]);        }).then(function (ret){            userIds = ret;            return Promise.all([                User.get(userIds[0]),                User.get(userIds[1])            ]);        }).then(function (users) {            tokens = users.map(function (user) {                return tokenGenerator.generate(user);            });            return Promise.all([                Role.save({                    name: 'admin',                    scope: 2                }),                Role.save({                    name: 'member',                    scope: 1                })            ]);        }).then(function (ret) {            roleIds = ret;            return Promise.all([                UserRole.save({                    user_id: userIds[0],                    role_id: roleIds[0],                    project_id: 0                }),                UserRole.save({                    user_id: userIds[1],                    role_id: roleIds[1],                    project_id: projectIds[0]                })            ]);        }).then(function () {            return Promise.all([                RolePrivilege.save({                    resource: 'PROJECT',                    operation: 'GET',                    role_id: roleIds[0]                }),                RolePrivilege.save({                    resource: 'PROJECT',                    operation: 'POST',                    role_id: roleIds[0]                }),                RolePrivilege.save({                    resource: 'PROJECT',                    operation: 'PUT',                    role_id: roleIds[0]                }),                RolePrivilege.save({                    resource: 'PROJECT',                    operation: 'DELETE',                    role_id: roleIds[0]                }),                RolePrivilege.save({                    resource: 'PROJECT',                    operation: 'GET',                    role_id: roleIds[1]                }),                RolePrivilege.save({                    resource: 'PROJECT',                    operation: 'PUT',                    role_id: roleIds[1]                })            ]);        }).then(function () {            return Promise.all([                Folder.save({                    name: 'f1',                    project_id: projectIds[0]                }),                Folder.save({                    name: 'f2',                    project_id: projectIds[1]                })            ]);        }).then(function (ret) {            parentFolderIds = ret;            return Promise.all([                Folder.save({                    name: 'f11',                    project_id: projectIds[0],                    parent_id: parentFolderIds[0]                }),                Folder.save({                    name: 'f12',                    project_id: projectIds[0],                    parent_id: parentFolderIds[0]                }),                Folder.save({                    name: 'f21',                    project_id: projectIds[1],                    parent_id: parentFolderIds[1]                }),                Folder.save({                    name: 'f22',                    project_id: projectIds[1],                    parent_id: parentFolderIds[1]                })            ]);        }).then(function (ids) {            childrenFolderIds = ids;            return DataSource.save({                name: 'loginUser',                key: 'loginUser',                project_id: projectIds[0],                folder_id: childrenFolderIds[0]            });        }).then(function (id) {            dataSourceId = id;            return Record.save({                data_source_id: dataSourceId,                value: 98,                year: 2014,                month: 6,                day: 28            });        }).then(function (id) {            recordId = id;            done();        }).catch(done);    });    after(function (done) {        return Promise.all([            knex('user_roles').del(),            knex('role_privileges').del(),            knex('users').del(),            knex('roles').del(),            knex('records').del(),            knex('data_sources').del(),            knex('folders').del(),            knex('projects').del()        ]).then(function () {            done();        }).catch(done);    });    describe('GET /api/folders/:id', function (){       it('should return a folder', function(done){           request(app)               .get('/api/folders/' + parentFolderIds[0] + '?token=' + tokens[0])               .expect('content-type', /json/)               .expect(200, done);       });    });    describe('GET /api/folders', function (){        it('should return folder list of the project, length is 3', function(done){            request(app)                .get('/api/folders' + '?project_id=' + projectIds[0] + '&token=' + tokens[0])                .expect('content-type', /json/)                .expect(200)                .expect(function (res){                    if(res.body.length !== 3){                        throw new Error('ret length invalid');                    }                })                .end(done);        });        it('should return folder list of the global user, length is 6', function(done){            request(app)                .get('/api/folders' + '?token=' + tokens[0])                .expect('content-type', /json/)                .expect(200)                .expect(function (res){                    if(res.body.length !== 6){                        throw new Error('ret length invalid');                    }                })                .end(done);        });        it('should return folder list of the local user, length is 3', function(done){            request(app)                .get('/api/folders' + '?token=' + tokens[1])                .expect('content-type', /json/)                .expect(200)                .expect(function (res){                    if(res.body.length !== 3){                        throw new Error('ret length invalid');                    }                })                .end(done);        });    });    describe('GET /api/folders/:parent_id/folders', function (){        it('should return folder list, length is 3', function(done){            request(app)                .get('/api/folders/' + parentFolderIds[0] +  '/folders' + '?token=' + tokens[0])                .expect('content-type', /json/)                .expect(200)                .expect(function (res){                    if(res.body.length !== 2){                        throw new Error('ret length invalid');                    }                })                .end(done);        });        it('should return folder list, length is 2', function(done){            request(app)                .get('/api/folders/' + 0 +  '/folders' + '?token=' + tokens[0])                .expect('content-type', /json/)                .expect(200)                .expect(function (res){                    if(res.body.length !== 2){                        throw new Error('ret length invalid');                    }                })                .end(done);        });    });    describe('POST /api/folders', function(){        it('should create a folder', function (done){           request(app)               .post('/api/folders' + '?token=' + tokens[0])               .send({                   name: '登录',                   project_id: projectIds[0]               })               .expect(200)               .expect('content-type', /json/)               .end(done);        });        it('should create a folder', function (done){            request(app)               .post('/api/folders' + '?token=' + tokens[0])               .send({                   name: '注册',                   project_id: projectIds[0],                   parent_id:parentFolderIds[0]               })               .expect(200)               .expect('content-type', /json/)               .end(done);            });    });    describe('PUT /api/folders/:id', function () {        it('should update a folder', function(done){            request(app)                .put('/api/folders/' + parentFolderIds[0] + '?token=' + tokens[0])                .send({                    name: 'login',                    project_id: projectIds[0]                })                .expect(200)                .expect('content-type', /json/)                .end(done);        });    });    describe('DELETE /api/folders/:id', function (){        it('should delete a folder', function(done){            request(app)                .delete('/api/folders/' + childrenFolderIds[0] + '?token=' + tokens[0])                .expect(200)                .end(function (err){                    if(err){                        return done(err);                    }                    request(app)                        .get('/api/data_sources/' + dataSourceId + '?token=' + tokens[0])                        .expect(200)                        .end(done);                });        });        it('should delete a folder recursively', function(done){            request(app)                .delete('/api/folders/' + parentFolderIds[0] + '?recursive=true' + '&token=' + tokens[0])                .expect(200)                .end(function (err){                    if(err){                        return done(err);                    }                    promisedRequest(app)                        .get('/api/folders/' + parentFolderIds[0] + '?token=' + tokens[0])                        .expect('content-type', /json/)                        .expect(404)                        .then(function () {                            return promisedRequest(app)                                .get('/api/folders/' + childrenFolderIds[0] + '?token=' + tokens[0])                                .expect('content-type', /json/)                                .expect(404);                        }).then(function () {                            return promisedRequest(app)                                .get('/api/data_sources/' + dataSourceId + '?token=' + tokens[0])                                .expect('content-type', /json/)                                .expect(404);                        }).then(function () {                            return promisedRequest(app)                                .get('/api/records/' + recordId + '?token=' + tokens[0])                                .expect('content-type', /json/)                                .expect(404);                        }).then(function () {                            done();                        });                });        });    });});