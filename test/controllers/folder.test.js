'use strict';var app = require('../../src/app');var request = require('supertest');var promisedRequest = require('supertest-as-promised');var Record = require('../../src/logicals/record');var DataSource = require('../../src/logicals/dataSource');var Project = require('../../src/logicals/project');var Folder = require('../../src/logicals/folder');var Promise = require('bluebird');var knex = require('../../src/lib/knex');describe('folder controller', function(){    var projectId = null;    var dataSourceId = null;    var folderIds = [];    var recordId = null;    before(function (done) {        Folder.save({name: 'f1'}).then(function (id) {            folderIds.push(id);            return Folder.get(id).then(function (folder) {                return Promise.all([                    Folder.save({                        name: 'f2',                        parent_id: folder.id                    }),                    Folder.save({                        name: 'f3',                        parent_id: folder.id                    })                ]);            });        }).then(function (ret) {            folderIds = folderIds.concat(ret);            return Project.save({name: 'ape'});        }).then(function (id){            projectId = id;            return DataSource.save({                name: 'loginUser',                key: 'loginUser',                project_id: projectId,                folder_id: folderIds[1]            });        }).then(function (id) {            dataSourceId = id;            return Record.save({                    data_source_id: dataSourceId,                    value: 98,                    year: 2014,                    month: 6,                    day: 28                });        }).then(function (id) {            recordId = id;            done();        }).catch(done);    });    after(function (done) {        return Promise.all([            knex('records').del(),            knex('data_sources').del(),            knex('projects').del(),            knex('folders').del()        ]).then(function () {            done();        }).catch(done);    });    describe('GET /api/folders/:id', function (){       it('should return a folder', function(done){           request(app)               .get('/api/folders/' + folderIds[0])               .expect('content-type', /json/)               .expect(200, done);       });   });    describe('GET /api/folders', function (){        it('should return folder list', function(done){            request(app)                .get('/api/folders')                .expect('content-type', /json/)                .expect(200, done);        });    });    describe('GET /api/folders/:parent_id/folders', function (){        it('should return folder list', function(done){            request(app)                .get('/api/folders/' + folderIds[0] +  '/folders')                .expect('content-type', /json/)                .expect(200, done);        });    });    describe('POST /api/folders', function(){        it('should create a folder', function (done){           request(app)               .post('/api/folders')               .send({                   name: '登录'               })               .expect(200)               .expect('content-type', /json/)               .end(done);        });        it('should create a folder', function (done){            request(app)               .post('/api/folders')               .send({                   parent_id: folderIds[0],                   name: '注册'               })               .expect(200)               .expect('content-type', /json/)               .end(done);            });    });    describe('PUT /api/folders/:id', function () {        it('should update a folder', function(done){            request(app)                .put('/api/folders/' + folderIds[0])                .send({                    name: 'login'                })                .expect(200)                .expect('content-type', /json/)                .end(done);        });    });    describe('DELETE /api/folders/:id', function (){        it('should delete a folder', function(done){            request(app)                .delete('/api/folders/' + folderIds[1])                .expect(200)                .end(function (err){                    if(err){                        return done(err);                    }                    request(app)                        .get('/api/data_sources/' + dataSourceId)                        .expect(200)                        .end(done);                });        });        it('should delete a folder recursively', function(done){            request(app)                .delete('/api/folders/' + folderIds[0] + '?recursive=true')                .expect(200)                .end(function (err){                    if(err){                        return done(err);                    }                    promisedRequest(app)                        .get('/api/folders/' + folderIds[0])                        .expect('content-type', /json/)                        .expect(404)                        .then(function () {                            return promisedRequest(app)                                .get('/api/folders/' + folderIds[2])                                .expect('content-type', /json/)                                .expect(404);                        }).then(function () {                            return promisedRequest(app)                                .get('/api/data_sources/' + dataSourceId)                                .expect('content-type', /json/)                                .expect(404);                        }).then(function () {                            return promisedRequest(app)                                .get('/api/records/' + recordId)                                .expect('content-type', /json/)                                .expect(404);                        }).then(function () {                            done();                        });                });        });    });});